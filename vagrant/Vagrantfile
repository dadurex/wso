Vagrant.configure("2") do |config|

  config.vm.box = "centos/8"
 
  config.vm.provision "repository configuration", type:'ansible' do |ansible|
    ansible.playbook = "repository-configuration-playbook.yaml"
  end

  config.vm.provision "install firewalld", type:'ansible' do |ansible|
    ansible.playbook = "firewalld-install-playbook.yaml"
  end

  config.vm.provision "install nginx on webapp", type:'ansible' do |ansible|
    ansible.playbook = "nginx-install-playbook.yaml"
  end
  
  config.vm.provision "install ftp on internal", type:'ansible' do |ansible|
    ansible.playbook = "ftp-install-playbook.yaml"
  end  

  # add dadurex's ssh public key to authorized_keys - there is only vagrant user
  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    s.inline = <<-SHELL
      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    SHELL
  end

  # Define the webapp virtual machine in the internal_one network
  config.vm.define "webapp" do |webapp|
    webapp.vm.network :private_network, :libvirt__network_name => "int_one", :ip => "192.168.1.10"
    webapp.vm.hostname = "webapp"
    webapp.vm.provider :libvirt do |libvirt|
      libvirt.management_network_name = "default"
    end
    webapp.vm.provision "shell", inline: <<-SHELL
      sudo ip route del default
      sudo ip route add default via 192.168.1.20
    SHELL
  end

  # Define the internal virtual machine in the internal_two network
  config.vm.define "internal" do |internal|
    internal.vm.network :private_network, :libvirt__network_name => "int_two", :ip => "192.168.2.10"
    internal.vm.hostname = "internal"
    internal.vm.provider :libvirt do |libvirt|
      libvirt.management_network_name = "default"
    end
    internal.vm.provision "shell", inline: <<-SHELL
      sudo ip route del default
      sudo ip route add default via 192.168.2.20
    SHELL
  end

  # Define the pub virtual machine in the public network
  config.vm.define "pub" do |pub|
    pub.vm.network :private_network, :libvirt__network_name => "pub", :ip => "192.168.3.10"
    pub.vm.hostname = "pub"
    pub.vm.provider :libvirt do |libvirt|
      libvirt.management_network_name = "default"
    end
    pub.vm.provision "shell", inline: <<-SHELL
      sudo ip route del default
      sudo ip route add default via 192.168.3.20
    SHELL
  end

  # Define the firewall virtual machine with all networks connected
  config.vm.define "firewall" do |firewall|
    firewall.vm.network :private_network, :libvirt__network_name => "int_one", :ip => "192.168.1.20"
    firewall.vm.network :private_network, :libvirt__network_name => "int_two", :ip => "192.168.2.20"
    firewall.vm.network :private_network, :libvirt__network_name => "pub", :ip => "192.168.3.20"
    firewall.vm.hostname = "firewall"
    firewall.vm.provider :libvirt do |libvirt|
      libvirt.management_network_name = "default"
    end

    firewall.vm.provision "shell", inline: <<-SHELL
      # required to act as a router
      sudo echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
      sudo sysctl -p
    SHELL
  end

end